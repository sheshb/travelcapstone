{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":793589,"sourceType":"datasetVersion","datasetId":57},{"sourceId":5113618,"sourceType":"datasetVersion","datasetId":2969743}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import csv\nimport random\nimport numpy as np\nfrom collections import Counter\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-24T08:55:04.934923Z","iopub.execute_input":"2024-04-24T08:55:04.936141Z","iopub.status.idle":"2024-04-24T08:55:04.941271Z","shell.execute_reply.started":"2024-04-24T08:55:04.936087Z","shell.execute_reply":"2024-04-24T08:55:04.940177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def parse_bike_data(file_path):\n    data = []\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            data.append({\n                'date': row['start_date'].split()[0],\n                'duration': int(row['duration']),\n                'start_station_name': row['start_station_name'],\n                'end_station_name': row['end_station_name']\n            })\n    return data\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T08:55:04.943394Z","iopub.execute_input":"2024-04-24T08:55:04.944585Z","iopub.status.idle":"2024-04-24T08:55:04.955266Z","shell.execute_reply.started":"2024-04-24T08:55:04.94454Z","shell.execute_reply":"2024-04-24T08:55:04.953857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def parse_weather_data(file_path):\n    data = {}\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            try:\n                date = row['date']\n                max_temp = float(row['max_temperature_f'])\n                mean_temp = float(row['mean_temperature_f'])\n                min_temp = float(row['min_temperature_f'])\n                max_dew_point = float(row['max_dew_point_f'])\n                mean_dew_point = float(row['mean_dew_point_f'])\n                min_dew_point = float(row['min_dew_point_f'])\n                max_humidity = float(row['max_humidity'])\n                mean_humidity = float(row['mean_humidity'])\n                min_humidity = float(row['min_humidity'])\n                data[date] = {\n                    'max_temperature_f': max_temp,\n                    'mean_temperature_f': mean_temp,\n                    'min_temperature_f': min_temp,\n                    'max_dew_point_f': max_dew_point,\n                    'mean_dew_point_f': mean_dew_point,\n                    'min_dew_point_f': min_dew_point,\n                    'max_humidity': max_humidity,\n                    'mean_humidity': mean_humidity,\n                    'min_humidity': min_humidity\n                }\n            except ValueError:\n                continue\n    return data\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T08:55:04.957794Z","iopub.execute_input":"2024-04-24T08:55:04.959055Z","iopub.status.idle":"2024-04-24T08:55:04.970985Z","shell.execute_reply.started":"2024-04-24T08:55:04.959005Z","shell.execute_reply":"2024-04-24T08:55:04.969648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndef merge_data(bike_data, weather_data):\n    merged_data = []\n    for entry in bike_data:\n        date = entry['date']\n        if date in weather_data:\n            entry.update(weather_data[date])\n            merged_data.append(entry)\n    return merged_data\n\ndef preprocess_data(data):\n    observations = []\n    for entry in data:\n        observation = (\n            entry['max_temperature_f'],\n            entry['mean_temperature_f'],\n            entry['min_temperature_f'],\n            entry['max_dew_point_f'],\n            entry['mean_dew_point_f'],\n            entry['min_dew_point_f'],\n            entry['max_humidity'],\n            entry['mean_humidity'],\n            entry['min_humidity']\n        )\n        observations.append(observation)\n    return observations\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T08:55:04.973548Z","iopub.execute_input":"2024-04-24T08:55:04.973938Z","iopub.status.idle":"2024-04-24T08:55:04.984381Z","shell.execute_reply.started":"2024-04-24T08:55:04.973908Z","shell.execute_reply":"2024-04-24T08:55:04.983358Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def build_hmm(data, num_states):\n    state_counter = Counter(data)\n    top_states = state_counter.most_common(num_states)\n    state_index_map = {state: i for i, (state, _) in enumerate(top_states)}\n    \n    num_states = len(top_states)\n    transition_matrix = np.zeros((num_states, num_states))\n    \n    for i in range(len(data) - 1):\n        current_state = data[i]\n        next_state = data[i + 1]\n        if current_state in state_index_map and next_state in state_index_map:\n            current_index = state_index_map[current_state]\n            next_index = state_index_map[next_state]\n            transition_matrix[current_index][next_index] += 1\n    \n    transition_matrix /= np.sum(transition_matrix, axis=1, keepdims=True)\n    \n    return transition_matrix, state_index_map\n\ndef viterbi(observations, transition_matrix, state_index_map):\n    num_states = len(transition_matrix)\n    num_observations = len(observations)\n    \n    V = np.zeros((num_states, num_observations))\n    backtrack = np.zeros((num_states, num_observations), dtype=int)\n    \n    for i in range(num_states):\n        V[i][0] = transition_matrix[i][state_index_map.get(observations[0], -1)]\n    \n    for t in range(1, num_observations):\n        for s in range(num_states):\n            if observations[t] in state_index_map:\n                prob_transitions = [V[s_prime][t-1] * transition_matrix[s_prime][s] for s_prime in range(num_states)]\n                V[s][t] = max(prob_transitions)\n                backtrack[s][t] = np.argmax(prob_transitions)\n    \n    best_sequence = [np.argmax(V[:, num_observations - 1])]\n    for t in range(num_observations - 1, 0, -1):\n        best_sequence.insert(0, backtrack[best_sequence[0]][t])\n    \n    predicted_durations = [int(observation[-1]) for observation in observations]\n    \n    return predicted_durations\n\ndef calculate_accuracy(predicted_durations, actual_durations):\n    absolute_errors = [abs(pred - actual) for pred, actual in zip(predicted_durations, actual_durations)]\n    mean_absolute_error = np.mean(absolute_errors)\n    return mean_absolute_error\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T08:55:04.985912Z","iopub.execute_input":"2024-04-24T08:55:04.986609Z","iopub.status.idle":"2024-04-24T08:55:05.005195Z","shell.execute_reply.started":"2024-04-24T08:55:04.986577Z","shell.execute_reply":"2024-04-24T08:55:05.003944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"bike_data_file = '/kaggle/input/sf-bay-area-bike-share/trip.csv'\nweather_data_file = '/kaggle/input/sf-bay-area-bike-share/weather.csv'\n\nbike_data = parse_bike_data(bike_data_file)\nweather_data = parse_weather_data(weather_data_file)\n\nmerged_data = merge_data(bike_data, weather_data)\nrandom.shuffle(merged_data)\n\nnum_states = 50 \n\nobservations = preprocess_data(merged_data)\n\ntransition_matrix, state_index_map = build_hmm(observations, num_states)\n\npredicted_durations = viterbi(observations, transition_matrix, state_index_map)\nactual_durations = [entry['duration'] for entry in merged_data]\n\naccuracy = calculate_accuracy(predicted_durations, actual_durations)\n\nprint(f\"Mean Absolute Error: {accuracy:.2f} minutes\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T08:55:05.006969Z","iopub.execute_input":"2024-04-24T08:55:05.007367Z","iopub.status.idle":"2024-04-24T09:01:57.661693Z","shell.execute_reply.started":"2024-04-24T08:55:05.007334Z","shell.execute_reply":"2024-04-24T09:01:57.66024Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import csv\nimport numpy as np\nfrom collections import Counter\nfrom hmmlearn import hmm\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(actual_durations[0:50], label='Actual Durations', color='blue')\nplt.plot(predicted_durations[0:50], label='Predicted Durations', color='red')\nplt.xlabel('Index')\nplt.ylabel('Duration')\nplt.title('Actual vs. Predicted Durations')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-24T09:01:57.663355Z","iopub.execute_input":"2024-04-24T09:01:57.663781Z","iopub.status.idle":"2024-04-24T09:02:00.45715Z","shell.execute_reply.started":"2024-04-24T09:01:57.663692Z","shell.execute_reply":"2024-04-24T09:02:00.455693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(predicted_durations[0:10])","metadata":{"execution":{"iopub.status.busy":"2024-04-24T09:02:35.292095Z","iopub.execute_input":"2024-04-24T09:02:35.292581Z","iopub.status.idle":"2024-04-24T09:02:35.298883Z","shell.execute_reply.started":"2024-04-24T09:02:35.292546Z","shell.execute_reply":"2024-04-24T09:02:35.297692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}